// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2830.CommandRobotSample;

import org.usfirst.frc2830.CommandRobotSample.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton4;
    public JoystickButton joystickButton2;
    public Joystick driverJoystick;
    public Joystick operatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorJoystick = new Joystick(1);
        
        driverJoystick = new Joystick(0);
        
        joystickButton2 = new JoystickButton(driverJoystick, 2);
        joystickButton2.whileHeld(new OpenChuck());
        joystickButton4 = new JoystickButton(driverJoystick, 4);
        joystickButton4.whileHeld(new CloseChuck());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Grab and Lift Tote", new GrabandLiftTote());

        SmartDashboard.putData("Grab Container", new GrabContainer());

        SmartDashboard.putData("Open Chuck", new OpenChuck());

        SmartDashboard.putData("Close Chuck", new CloseChuck());

        SmartDashboard.putData("Up Elevator", new UpElevator());

        SmartDashboard.putData("Down Elevator", new DownElevator());

        SmartDashboard.putData("Operator Control Chuck", new OperatorControlChuck());

        SmartDashboard.putData("Operator Control Elevator", new OperatorControlElevator());

        SmartDashboard.putData("Lift to Place on Tote", new LifttoPlaceonTote());

        SmartDashboard.putData("Prepare to Grab Tote", new PreparetoGrabTote());

        SmartDashboard.putData("Prepare to Grab Container", new PreparetoGrabContainer());

        SmartDashboard.putData("Field Centric Drive", new FieldCentricDrive());

        SmartDashboard.putData("Robotic Centric Drive", new RoboticCentricDrive());

        SmartDashboard.putData("One Tote To Auto", new OneToteToAuto());

        SmartDashboard.putData("One Container To Auto", new OneContainerToAuto());

        SmartDashboard.putData("Drive To Auto", new DriveToAuto());

        SmartDashboard.putData("Tote And Container To Auto", new ToteAndContainerToAuto());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

